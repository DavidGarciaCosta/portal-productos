import express from 'express';
import User from '../models/User.js';
import { generateToken } from '../middleware/authenticateJWT.js';
import { authenticateJWT } from '../middleware/authenticateJWT.js';

const router = express.Router();

console.log('üõ†Ô∏è === INICIALIZANDO AUTH ROUTES ===');

// Ruta de diagn√≥stico del servidor
router.get('/debug', (req, res) => {
    console.log('üîß DEBUG: Ruta de autenticaci√≥n accesible');
    res.json({
        success: true,
        message: 'Servidor de autenticaci√≥n funcionando',
        timestamp: new Date().toISOString()
    });
});

// Registro de usuario - VERSI√ìN CORREGIDA
router.post('/register', async (req, res) => {
    try {
        console.log('üìù === INICIANDO REGISTRO ===');
        console.log('üì¶ Datos recibidos COMPLETOS:', req.body);

        // ‚ö†Ô∏è CORREGIDO: Incluir role en la destructuraci√≥n
        const { username, email, password, role } = req.body;

        // Validaciones b√°sicas
        if (!username || !email || !password) {
            console.log('‚ùå Faltan campos requeridos');
            return res.status(400).json({
                success: false,
                message: 'Todos los campos son requeridos'
            });
        }

        // ‚ö†Ô∏è DIAGN√ìSTICO DETALLADO DEL ROL
        console.log('üîç DIAGN√ìSTICO ROL:');
        console.log('   - Rol recibido:', role);
        console.log('   - Tipo de dato:', typeof role);
        console.log('   - Es "admin"?:', role === 'admin');
        console.log('   - Es "user"?:', role === 'user');
        console.log('   - Est√° definido?:', role !== undefined);
        console.log('   - Est√° vac√≠o?:', !role);

        // ‚ö†Ô∏è DETERMINAR ROL FINAL - L√≥gica corregida
        let finalRole = 'user'; // Valor por defecto
        
        if (role && typeof role === 'string') {
            const cleanRole = role.trim().toLowerCase();
            if (cleanRole === 'admin') {
                finalRole = 'admin';
                console.log('üé≠ ROL ASIGNADO: ADMINISTRADOR');
            } else {
                console.log('üé≠ ROL ASIGNADO: USUARIO NORMAL');
            }
        } else {
            console.log('üé≠ ROL POR DEFECTO: USUARIO (no se recibi√≥ rol v√°lido)');
        }

        // Verificar si el usuario ya existe
        console.log('üîç Verificando usuario existente...');
        const existingUser = await User.findOne({
            $or: [{ email }, { username }]
        });

        if (existingUser) {
            console.log('‚ùå Usuario ya existe:', existingUser.email);
            return res.status(400).json({
                success: false,
                message: 'El usuario o email ya est√° registrado'
            });
        }

        // ‚ö†Ô∏è CORREGIDO: Crear usuario con rol expl√≠cito
        console.log('üë§ Creando nuevo usuario con rol:', finalRole);
        const user = new User({
            username,
            email,
            password,
            role: finalRole  // ‚ö†Ô∏è ASIGNACI√ìN EXPL√çCITA DEL ROL
        });

        console.log('üíæ Guardando usuario en BD...');
        await user.save();
        
        // Verificaci√≥n despu√©s de guardar
        console.log('‚úÖ Usuario guardado con ID:', user._id);
        console.log('üé≠ Rol guardado en usuario:', user.role);
        
        // Verificaci√≥n directa en BD
        const userFromDB = await User.findById(user._id);
        console.log('üîç Verificaci√≥n BD - Rol almacenado:', userFromDB.role);

        // Generar token
        console.log('üõ†Ô∏è Generando JWT para nuevo usuario...');
        const token = generateToken(user);

        console.log('üéâ Registro exitoso');
        console.log('üë§ Datos finales:', {
            username: user.username,
            email: user.email,
            role: user.role
        });

        res.status(201).json({
            success: true,
            message: 'Usuario registrado exitosamente',
            token,
            user: user.toProfileJSON()
        });

    } catch (error) {
        console.error('üí• ERROR en registro:', error);
        console.error('üîç Detalles del error:', error.stack);
        res.status(500).json({
            success: false,
            message: 'Error en el servidor',
            error: error.message
        });
    }
});

// Login de usuario - Con diagn√≥stico mejorado
router.post('/login', async (req, res) => {
    try {
        console.log('üîê === INICIANDO LOGIN ===');
        console.log('üìß Email recibido:', req.body.email);
        console.log('üîë Password recibido:', req.body.password ? '***' : 'VAC√çO');

        const { email, password } = req.body;

        if (!email || !password) {
            console.log('‚ùå Faltan credenciales');
            return res.status(400).json({
                success: false,
                message: 'Email y contrase√±a son requeridos'
            });
        }

        // Buscar usuario
        console.log('üîç Buscando usuario en BD...');
        const user = await User.findOne({ email });
        
        if (!user) {
            console.log('‚ùå Usuario no encontrado:', email);
            return res.status(401).json({
                success: false,
                message: 'Credenciales inv√°lidas'
            });
        }

        console.log('‚úÖ Usuario encontrado:', user.username);
        console.log('üé≠ ROL DEL USUARIO EN BD:', user.role); // ‚ö†Ô∏è DIAGN√ìSTICO DEL ROL

        // Verificar contrase√±a
        console.log('üîë Verificando contrase√±a...');
        const isValidPassword = await user.comparePassword(password);
        
        if (!isValidPassword) {
            console.log('‚ùå Contrase√±a incorrecta');
            return res.status(401).json({
                success: false,
                message: 'Credenciales inv√°lidas'
            });
        }

        console.log('‚úÖ Contrase√±a v√°lida');

        // Generar token
        console.log('üõ†Ô∏è Generando JWT...');
        const token = generateToken(user);
        
        if (!token) {
            console.log('‚ùå ERROR: No se pudo generar el token');
            return res.status(500).json({
                success: false,
                message: 'Error al generar token'
            });
        }

        console.log('‚úÖ JWT generado correctamente');
        console.log('üë§ Datos en el token:', {
            userId: user._id,
            username: user.username,
            email: user.email,
            role: user.role
        });

        res.json({
            success: true,
            message: 'Login exitoso',
            token,
            user: user.toProfileJSON()
        });

        console.log(' Login completado exitosamente');

    } catch (error) {
        console.error('ERROR en login:', error);
        console.error(' Stack trace:', error.stack);
        res.status(500).json({
            success: false,
            message: 'Error en el servidor',
            error: error.message
        });
    }
});

// Verificar token
router.get('/verify', authenticateJWT, (req, res) => {
    console.log('Token verificado correctamente para:', req.user.username);
    console.log('Rol del usuario verificado:', req.user.role);
    res.json({
        success: true,
        user: req.user
    });
});

// Obtener perfil de usuario
router.get('/profile', authenticateJWT, async (req, res) => {
    try {
        const user = await User.findById(req.user.userId).select('-password');
        console.log('Perfil solicitado para:', user.username);
        console.log('Rol en perfil:', user.role);
        res.json({
            success: true,
            user: user.toProfileJSON()
        });
    } catch (error) {
        console.error('Error al obtener perfil:', error);
        res.status(500).json({
            success: false,
            message: 'Error al obtener perfil',
            error: error.message
        });
    }
});

// Diagn√≥stico: Listar todos los usuarios
router.get('/debug/users', async (req, res) => {
    try {
        console.log('Listando todos los usuarios...');
        const users = await User.find().select('-password');
        console.log('üë• Usuarios en BD:', users.length);
        
        users.forEach(user => {
            console.log(`   - ${user.username} (${user.email}) - ${user.role}`);
        });
        
        res.json({
            success: true,
            count: users.length,
            users: users
        });
    } catch (error) {
        console.error('Error listando usuarios:', error);
        res.status(500).json({
            success: false,
            message: 'Error al listar usuarios',
            error: error.message
        });
    }
});

// Diagn√≥stico completo de roles
router.get('/debug/roles-detailed', async (req, res) => {
    try {
        console.log('DIAGN√ìSTICO DETALLADO DE ROLES');
        
        const users = await User.find().select('username email role createdAt updatedAt');
        console.log('üë• Total usuarios en BD:', users.length);
        
        const roleCount = {
            admin: 0,
            user: 0
        };
        
        users.forEach(user => {
            roleCount[user.role]++;
            console.log(`    ${user.username} (${user.email})`);
            console.log(`      Rol: ${user.role}`);
            console.log(`      Creado: ${user.createdAt}`);
            console.log(`      Actualizado: ${user.updatedAt}`);
            console.log(`      ---`);
        });
        
        console.log('Estad√≠sticas de roles:', roleCount);
        
        res.json({
            success: true,
            totalUsers: users.length,
            roleCount,
            users: users
        });
        
    } catch (error) {
        console.error('Error en diagn√≥stico detallado:', error);
        res.status(500).json({
            success: false,
            message: 'Error en diagn√≥stico',
            error: error.message
        });
    }
});

// Ruta para crear un usuario admin manualmente (solo para desarrollo)
router.post('/debug/create-admin', async (req, res) => {
    try {
        const { username, email, password } = req.body;
        
        if (!username || !email || !password) {
            return res.status(400).json({
                success: false,
                message: 'Todos los campos son requeridos'
            });
        }

        // Verificar si ya existe
        const existingUser = await User.findOne({
            $or: [{ email }, { username }]
        });

        if (existingUser) {
            return res.status(400).json({
                success: false,
                message: 'El usuario ya existe'
            });
        }

        // Crear usuario admin
        const user = new User({
            username,
            email,
            password,
            role: 'admin' 
        });

        await user.save();

        console.log( {
            username: user.username,
            email: user.email,
            role: user.role
        });

        const token = generateToken(user);

        res.status(201).json({
            success: true,
            message: 'Usuario administrador creado exitosamente',
            token,
            user: user.toProfileJSON()
        });

    } catch (error) {
        console.error('Error creando admin manual:', error);
        res.status(500).json({
            success: false,
            message: 'Error creando usuario admin',
            error: error.message
        });
    }
});

export default router;